{ "post_change_time" : 1545221124000,
   
"post_content": "<p>Entry for December 18th, 2018</p> <p>Today, on the GitBlog side I will put in the post functionality, I think.</p> <p>Another thought is I should probably try twitter bootstrap css</p> <p>Right now, I'll continue on the Pandas tutorial on the Kaggle site.</p> <p>Here is a nice one-liner for reading a dataframe from sqlite3:</p> <pre> music_reviews = pd.read_sql_query('select 1545321590990.html 1545321590990.json 1545322276130.html 1545322276130.json 1545322405355.html 1545322405355.json 1545322465365.html 1545322465365.json 1545364170261.html 1545364170261.json 1545364369876.html 1545364369876.json 1545364559794.html 1545364559794.json 1545364707969.html 1545364707969.json 1545364815617.html 1545364815617.json 1545364992845.html 1545364992845.json 2018_12_15.html 2018_12_15.json 2018_12_16.html 2018_12_16.json 2018_12_17.html 2018_12_17.json 2018_12_18.html 2018_12_18.json 2018_12_19.html 2018_12_20.html 2018_12_21.json jsonify-posts.sh from artists', sqlite3.connect('../input/pitchfork-data/database.sqlite')) </pre> <p>And here is how to set the values of indices:</p> <pre> animals = pd.DataFrame({'Cows': [12, 20], 'Goats': [22, 19]}, index=['Year 1', 'Year 2']) </pre> <p>Select the first row of a dataframe df:</p> <pre>df.iloc[0]</pre> <p>First 10 values of a column:</p> <pre> df.column_name.iloc[:10]</pre> <p>Pick and choose rows:</p> <pre>df.iloc[[1,2,3,5,8]]</pre> <p>Still doing the Pandas tutorial, this is the correct answer for number 7:</p> <pre>df = reviews[['country', 'variety']].iloc[0:100]</pre> <p>Which seems to me to be the opposite of what they just quoted in the documentation</p> <p>Another good point about doing the Kaggle tutorials is that it teaches using the Kaggle environment, which is basically Jupyter, but with bells &amp; whistles that Kaggle has added on.</p> <p>Median value of dataframe df's column_name column:</p> <pre>df.describe().column_name['50%']</pre> <p>Wow, didn't know this would work. Subtract mean value of column with name column_name from every value in column_name, using some dataframe named df:</p> <pre>mean_column_name_values = df.column_name - (df.describe().column_name['mean'])</pre> <p>It seems like:</p> <pre>df.column_name.value_counts()</pre> <p>and</p> <pre>df.groupby('column_name').size()</pre> <p>Get the same data, but it is organized differently. It seems like the point of it in the tutorial is that </p> <pre>df.groupby('column_name').size() creates a series with indices that are values we are counting. </pre> <p>df.groupby(['column_1', 'column_2']) creates a multi-index</p> <p>Important syntax note for dataframes - one can reference a column, and then apply a function to every value in the column, like so:</p> <pre>df.column_name.function()</pre> <p>I think the function must be a method of the Pandas Series object.</p> <p>I was thinking of stealing some example code for implementing commit and push for the blog, but it appears to be a dead end - there is some mature code for using the Github REST API in JavaScript, but I would end up adding thousands of lines of code to get that functionality - lots of dependent libraries, so in the end it will probably be better to follow the tutorial and do the steps the author recommends, but write my own functions, referencing the github API documentation.</p> <p> I am trying kaggle in FireFox. It seems chrome is unstable for this. Also, it chrome flickers when committing, which is really not good.</p> <p> I think Kaggle itself, might be kind of busy, but it looks like the commit dialog box that opens does not cause the page to flicker in FireFox, which is wonderful. </p> <p> Just learned something important - pre-trained models are available on Kaggle. For example, Resnet50.</p> <p> Ok, maybe I got too excited there, looks like they're possibly taking credit for some models built in to TensorFlow. Oh, maybe not, I think maybe they have weights stored for us to use.</p>"}
